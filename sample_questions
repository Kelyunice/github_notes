              JENKINS SETUP AND CONFIGURATION
1- How would you design a jenkins setup for a large-scale enterprise application with multiple teams?
    - Design a master-agent architecture where the master agent handles scheduling and orchestration jobs, and agents execute jobs.
    - Use distributed builds by configuring jenkins agent on different machines or contaainers.
    - Implement folder based multi-tenancy to isolate pipelines for each team.
    - secure the jenkins setup using the role based access control (RBAC)
    - Example: A team has access to folder A with restricted pipeline visibility, while the master node ensures no resource contention.
2- How can you scale jenkins to handle high build loads?
    - Use k8s based Jenkins-agents that scale dynamically based on workload.
    - Implement build queue monitoring and optimize resource allocation by offloading non-critical jobs to low-priority nodes.
    - Use Jenkins Operations Center (CloudBase CI) for centralized management of multiple jenkins instances.
3- How do you manage plugins in a Jenkins environment to ensure stability?
    - Maintain a list oof approved plugins after testing compatibility with the jenkins version.
    - Regurlary update plugins in astaging environment before rolling them into production.
    - Example: While upgrading the git plugin,test it with your pipeline in staging to ensure no disruption.
4- How do you design a Jenkins Pipeline to support multiple environments(e.g Dev, QA and Prod)?
    - Use parameterized pipelines where environment-specific configurations (e.g URLs, credentials) are are passed as parameters.
    - Implement environment-specific stages or branch specific pipelines.
    - Example A pipleine that promotes a build from Dev to QA and then to Prod using approval gates between stages.
5- How can you handle dynamic branch creation in Jenkins pipelines?
    - Using multibranch pipelines that automatically detect new branches in a repository and creates pipelines for them.
    - Configure the Jenkinsfile in each branch to define its pipeline behavior
6- How do you ensure pipeline resilience in case of intermitent failures?
    - Use retry blocks in declarative or scripted pipelines to retry failed stages.
    - Example Retrying a flaky test stage three times with exponential backoff.
    - Implement conditional steps using CATCHERROR to handle faillures gracefully.

              SECURITY AND ACCESS CONTROL
7- How do you secure sensitive credentials in jenkins pipeline?
    - Use the jenkins credentails plugins to store secrets securely.
    - Access credentials using environment variables or bindings in the pipeline.
    - Examples Fetch an API key stored in jenkins credentails using WITHCREDENTIALS in ascripted pipeline.
8- How do you enforce Role Based Access Control (RBAC) in jenkins?
    - Use the Role-Based authorization strategy plugin.
    - Define roles like Admin, Developer, and Viewer , and assign permissions for jobs, folders, and builds accordingly.


             INTERGRATION WITH TOOLS
9- How do you intergrate jenkins with Docker for Building applications.
    - Use the Docker plugin or Docker pipeline plugin
    - Example : Build a docker image inthe pipeline using (docker.build ) and push to a container registry.
    - Run test in ephemeral docker containers for consistent test environments.
10- How do you intergrate Jenkins with a K8s cluster for deployments?
    - Use the K8s plugin on kubectl commands in the pipeline.
    - EXAMPLE:Use the k8s pod template with customcontainers for builds, the deploy apllications using (kubectl apply)

              JOB OPTIMIZATION AND PERFORMANCE
11- How can you reduce the build time of a jenkins Job?
    - Use parralel stages(nodes) to execute independent simultanously
    - Example:parralelize static code analysis, unit tests, and intergration tests.
    - use build caching mechanisms like Docker layer caching or dependency caching.
12- How do you optimize jenkins for CI/CD pipelines with heavy test loads?
    - Split tests into smaller batches and run them in parallel.
    - use sharding for distributed test execution across multiple agents.
    - EXAMPLE: Divide a 10,000-test suite into 10 shards and distribute them across agents.


                 REAL-WORLD TROUBLESHOOTING
13- What would you do if a jenkins job hangs indefinitely?
    - check the jenkins build logs for deadlocks or resource contention
    - Restart the agent where the build is stuck, if needed.
    - Example: A job stuck in (Docker build) could indicate Docker daemon issues;restart the Docker service.
14- How do you troubleshoot a jenkins job that keeps failing at the same step?
    - Analyse the console output to identify the error message.
    - Check for environment issues like missing dependencies or incorrect permissions.
    - Example:A maven build failing due to repository connectivity might require checking proxy configurations.

             ADVANCED PIPELINE SCENARIOS
15-How do you implement manual approvals gates in jenkins pipelines?
    - Use the input step in a declarative pipeline.
    - Example: Add an approval step before deploying to production.Only after manual confirmation does the pipeline proceed.
16- How do you handle blue-green deployments in jenkins?
    - create seperate pipelines for blue and green environments.
    - Route traffic to the new environment after successful deployment and health checks.
    - Example: use AWS Route3 or k8s ingress to switch traffic seamlessly.


               MONITORING AND REPORTING
17-How do you monitor jenkins build trends?
    - use the build history and Build monitoring plugins
    - Example: Visualize pass/failtrends over time to identify flaky tests. 
18- How do you notify teams about build failures?
    - Use the Email Extension or Slack Notification plugins.
    - Example: configure a Slack webhook to notify the (#build-alerts) channel upon failure.


              VERSION CONTROL SYSTEM INTERGRATION
19-How do you manage monorepos in jenkins pipelines?
    - use sparse checkouts to fetch only the directions.
    - Example: Trigger pipelines based on changes in specific subdirectories using the (dir) parameter in Git.
20- How do you handle merge conflicts in a jenkins pipeline?
    - Use Git pre-merge hooks or resolve conflicts locally and push the update code.
    -Exaample: A pipeline can fetch both source and target branches, merge them in a temporary branch, and check for conflicts.


             ADVANCED PIPELINE DESIGN
21-  How do you trigger a jenkins pipeline from another pipeline?
    - Use the (build) step in a scripted or declarative pipeline to trigger another pipeline
    - Example : pipeline A biolds the application, and pipeline B deploys it. PipelineA calls Pipeline B using 
                (build(job: 'Pipeline-B',parameters: [string(name: 'version',value: '1.0'))).
22- How do you handle shared libraries in jenkins pipelines?
    - Use the (Global Shared Libraries) feature in jenkins.
    - Example: Create reusable Groovy functions for common task (e.g , linting, packaging) and call them in pipelines suing @Library('my-library').
23- How do you implement conditional logic in jenkins pipelines?
    - Use (which) in declarative pipeline or (if) statements inscripted pipelines.
    - Example: Skip deployment if the branch is not (main) using (when {branch 'main'}.
